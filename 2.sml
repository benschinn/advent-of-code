val dirs = [("forward", 2), ("forward", 5), ("forward", 5), ("down", 4), ("forward", 8), ("down", 1), ("forward", 2), ("forward", 2), ("down", 9), ("down", 2), ("forward", 6), ("forward", 3), ("down", 9), ("down", 2), ("forward", 4), ("up", 2), ("forward", 7), ("up", 6), ("forward", 8), ("forward", 4), ("up", 5), ("forward", 3), ("down", 9), ("forward", 5), ("forward", 8), ("forward", 6), ("forward", 6), ("forward", 8), ("forward", 8), ("forward", 5), ("down", 2), ("forward", 8), ("down", 4), ("down", 6), ("down", 6), ("forward", 7), ("forward", 6), ("up", 3), ("up", 5), ("down", 5), ("down", 3), ("up", 2), ("down", 7), ("down", 2), ("forward", 1), ("forward", 6), ("up", 1), ("down", 7), ("forward", 8), ("down", 7), ("down", 6), ("forward", 5), ("up", 6), ("forward", 9), ("down", 9), ("up", 3), ("down", 6), ("down", 1), ("forward", 6), ("up", 1), ("down", 1), ("up", 3), ("up", 7), ("forward", 1), ("down", 5), ("forward", 7), ("forward", 3), ("down", 9), ("up", 8), ("forward", 1), ("down", 4), ("up", 1), ("forward", 9), ("forward", 7), ("down", 2), ("forward", 8), ("down", 2), ("down", 5), ("down", 2), ("up", 1), ("down", 5), ("forward", 4), ("forward", 8), ("forward", 3), ("forward", 3), ("forward", 1), ("down", 1), ("forward", 1), ("down", 7), ("up", 7), ("down", 3), ("down", 1), ("down", 7), ("down", 4), ("forward", 7), ("forward", 5), ("down", 9), ("down", 5), ("forward", 3), ("up", 7), ("down", 2), ("up", 1), ("forward", 1), ("forward", 2), ("down", 7), ("down", 3), ("forward", 7), ("up", 4), ("forward", 3), ("up", 8), ("down", 9), ("down", 4), ("forward", 5), ("forward", 6), ("down", 3), ("down", 5), ("down", 4), ("down", 9), ("down", 8), ("forward", 6), ("down", 3), ("down", 1), ("down", 9), ("down", 6), ("forward", 9), ("forward", 2), ("up", 5), ("forward", 5), ("forward", 4), ("down", 9), ("up", 7), ("up", 2), ("forward", 1), ("forward", 8), ("forward", 6), ("up", 8), ("down", 9), ("down", 2), ("forward", 7), ("down", 6), ("forward", 7), ("up", 9), ("up", 7), ("down", 8), ("up", 1), ("forward", 2), ("forward", 9), ("down", 9), ("forward", 6), ("down", 2), ("down", 1), ("up", 3), ("forward", 4), ("down", 3), ("down", 4), ("down", 9), ("up", 8), ("up", 8), ("forward", 3), ("up", 7), ("forward", 9), ("forward", 7), ("up", 2), ("up", 8), ("forward", 2), ("down", 6), ("forward", 3), ("forward", 1), ("down", 7), ("down", 2), ("forward", 9), ("forward", 9), ("down", 3), ("forward", 2), ("forward", 8), ("down", 6), ("forward", 6), ("forward", 5), ("forward", 1), ("forward", 6), ("down", 8), ("down", 7), ("up", 9), ("down", 6), ("up", 7), ("down", 2), ("up", 8), ("up", 8), ("down", 3), ("down", 7), ("up", 2), ("up", 2), ("down", 6), ("down", 6), ("forward", 2), ("down", 6), ("forward", 8), ("forward", 9), ("down", 3), ("forward", 6), ("down", 9), ("forward", 1), ("up", 6), ("down", 3), ("up", 5), ("forward", 9), ("forward", 7), ("forward", 9), ("forward", 5), ("up", 6), ("down", 3), ("down", 3), ("down", 3), ("forward", 1), ("up", 5), ("forward", 3), ("forward", 2), ("down", 1), ("forward", 7), ("down", 1), ("forward", 6), ("forward", 5), ("forward", 9), ("up", 6), ("forward", 1), ("up", 8), ("down", 7), ("forward", 6), ("forward", 3), ("forward", 1), ("up", 6), ("forward", 4), ("up", 6), ("down", 7), ("forward", 8), ("forward", 4), ("forward", 6), ("forward", 5), ("up", 6), ("down", 7), ("up", 9), ("down", 7), ("forward", 3), ("down", 7), ("forward", 6), ("down", 6), ("down", 6), ("forward", 8), ("up", 8), ("forward", 8), ("forward", 2), ("down", 8), ("forward", 4), ("forward", 9), ("forward", 7), ("down", 4), ("down", 7), ("forward", 4), ("forward", 3), ("forward", 2), ("forward", 2), ("forward", 5), ("down", 6), ("forward", 1), ("forward", 6), ("up", 8), ("up", 3), ("up", 9), ("forward", 3), ("up", 8), ("forward", 3), ("up", 8), ("down", 9), ("up", 7), ("forward", 9), ("forward", 1), ("down", 7), ("forward", 9), ("down", 6), ("forward", 4), ("down", 3), ("up", 9), ("forward", 5), ("down", 4), ("up", 6), ("down", 1), ("up", 9), ("forward", 2), ("up", 2), ("down", 1), ("forward", 7), ("down", 6), ("down", 4), ("down", 7), ("down", 4), ("down", 8), ("up", 9), ("down", 6), ("up", 3), ("down", 7), ("forward", 3), ("forward", 1), ("down", 1), ("forward", 2), ("forward", 6), ("down", 6), ("forward", 5), ("down", 8), ("down", 8), ("down", 6), ("down", 9), ("forward", 6), ("forward", 7), ("up", 8), ("forward", 5), ("up", 8), ("down", 6), ("up", 3), ("forward", 9), ("up", 9), ("forward", 2), ("up", 6), ("forward", 2), ("down", 8), ("forward", 3), ("down", 5), ("down", 8), ("up", 6), ("down", 3), ("down", 7), ("down", 4), ("forward", 5), ("forward", 8), ("down", 8), ("forward", 6), ("down", 8), ("up", 1), ("forward", 5), ("down", 3), ("down", 2), ("up", 1), ("forward", 3), ("forward", 7), ("forward", 6), ("forward", 9), ("up", 8), ("down", 2), ("down", 1), ("down", 7), ("forward", 4), ("forward", 2), ("down", 9), ("down", 3), ("down", 5), ("up", 6), ("down", 2), ("forward", 8), ("up", 1), ("up", 5), ("down", 6), ("down", 7), ("forward", 3), ("down", 4), ("up", 6), ("down", 9), ("up", 6), ("down", 2), ("down", 2), ("down", 6), ("down", 3), ("forward", 9), ("down", 6), ("forward", 5), ("forward", 6), ("forward", 4), ("down", 6), ("forward", 3), ("down", 9), ("up", 8), ("forward", 2), ("up", 3), ("forward", 1), ("up", 8), ("forward", 1), ("down", 6), ("down", 3), ("forward", 5), ("forward", 4), ("down", 9), ("up", 3), ("down", 6), ("forward", 4), ("down", 8), ("down", 3), ("down", 7), ("forward", 1), ("forward", 2), ("forward", 8), ("down", 2), ("down", 6), ("up", 9), ("forward", 2), ("forward", 4), ("forward", 8), ("down", 3), ("forward", 9), ("down", 7), ("up", 8), ("forward", 1), ("down", 6), ("down", 3), ("forward", 5), ("forward", 5), ("forward", 2), ("down", 2), ("down", 2), ("down", 2), ("up", 4), ("forward", 2), ("forward", 5), ("forward", 1), ("forward", 5), ("down", 3), ("forward", 8), ("up", 1), ("forward", 9), ("up", 5), ("forward", 2), ("down", 4), ("forward", 8), ("forward", 9), ("up", 6), ("up", 1), ("down", 7), ("down", 3), ("forward", 9), ("down", 3), ("down", 3), ("forward", 3), ("forward", 6), ("up", 4), ("forward", 2), ("down", 9), ("forward", 5), ("forward", 3), ("forward", 5), ("down", 6), ("up", 6), ("down", 7), ("forward", 2), ("down", 4), ("forward", 6), ("forward", 5), ("forward", 8), ("down", 4), ("up", 3), ("up", 4), ("down", 9), ("forward", 9), ("down", 7), ("down", 1), ("down", 9), ("down", 6), ("down", 8), ("forward", 7), ("down", 3), ("up", 3), ("up", 5), ("forward", 5), ("up", 6), ("down", 6), ("forward", 9), ("down", 7), ("forward", 6), ("up", 1), ("forward", 7), ("forward", 8), ("down", 9), ("down", 1), ("forward", 4), ("up", 2), ("down", 3), ("up", 3), ("down", 6), ("forward", 6), ("down", 7), ("down", 2), ("forward", 8), ("forward", 2), ("forward", 3), ("forward", 5), ("up", 8), ("up", 6), ("down", 1), ("up", 7), ("down", 1), ("down", 8), ("forward", 5), ("up", 7), ("down", 1), ("forward", 8), ("down", 6), ("down", 2), ("up", 7), ("down", 1), ("forward", 1), ("up", 8), ("forward", 5), ("down", 7), ("down", 8), ("forward", 4), ("down", 6), ("down", 2), ("forward", 4), ("forward", 7), ("down", 5), ("down", 1), ("down", 8), ("down", 3), ("up", 8), ("down", 6), ("down", 1), ("down", 1), ("forward", 4), ("down", 8), ("up", 5), ("forward", 3), ("forward", 3), ("forward", 5), ("forward", 8), ("up", 7), ("forward", 5), ("down", 8), ("forward", 9), ("up", 9), ("forward", 1), ("down", 2), ("up", 9), ("down", 7), ("up", 1), ("up", 3), ("forward", 9), ("forward", 8), ("forward", 3), ("forward", 8), ("down", 8), ("down", 5), ("down", 7), ("up", 7), ("forward", 9), ("up", 8), ("down", 9), ("down", 9), ("down", 1), ("up", 4), ("up", 4), ("up", 3), ("forward", 3), ("down", 7), ("down", 3), ("forward", 5), ("up", 9), ("down", 3), ("up", 2), ("forward", 1), ("forward", 4), ("up", 9), ("forward", 6), ("down", 6), ("down", 6), ("forward", 2), ("forward", 2), ("down", 4), ("forward", 9), ("up", 6), ("down", 8), ("down", 8), ("down", 9), ("up", 4), ("down", 9), ("down", 3), ("down", 7), ("forward", 4), ("up", 4), ("up", 5), ("down", 2), ("up", 2), ("forward", 1), ("up", 8), ("forward", 2), ("down", 6), ("forward", 9), ("down", 9), ("forward", 9), ("up", 8), ("down", 5), ("up", 3), ("up", 9), ("down", 8), ("forward", 6), ("forward", 2), ("forward", 7), ("down", 9), ("down", 8), ("up", 9), ("down", 5), ("up", 5), ("down", 1), ("forward", 3), ("down", 2), ("down", 5), ("down", 4), ("down", 1), ("down", 5), ("down", 5), ("down", 5), ("forward", 8), ("down", 2), ("down", 3), ("down", 4), ("down", 2), ("up", 8), ("up", 1), ("down", 5), ("forward", 8), ("down", 6), ("forward", 9), ("down", 6), ("down", 6), ("down", 5), ("forward", 5), ("forward", 3), ("forward", 7), ("down", 6), ("forward", 4), ("down", 8), ("up", 9), ("up", 6), ("forward", 5), ("down", 4), ("forward", 8), ("forward", 1), ("forward", 8), ("up", 5), ("up", 5), ("forward", 6), ("down", 3), ("down", 7), ("up", 7), ("down", 5), ("forward", 1), ("forward", 3), ("up", 3), ("down", 3), ("down", 3), ("down", 5), ("forward", 9), ("down", 2), ("up", 5), ("up", 2), ("forward", 1), ("down", 1), ("forward", 5), ("down", 8), ("forward", 8), ("forward", 9), ("forward", 3), ("forward", 2), ("forward", 4), ("down", 5), ("up", 1), ("down", 5), ("up", 1), ("up", 4), ("forward", 2), ("forward", 4), ("down", 6), ("up", 2), ("up", 4), ("forward", 4), ("down", 7), ("forward", 2), ("up", 1), ("forward", 4), ("up", 4), ("forward", 9), ("down", 1), ("down", 4), ("up", 1), ("forward", 2), ("forward", 3), ("down", 6), ("forward", 9), ("forward", 3), ("down", 2), ("forward", 9), ("up", 4), ("forward", 5), ("forward", 2), ("down", 2), ("forward", 5), ("down", 5), ("down", 3), ("down", 7), ("down", 7), ("up", 3), ("down", 7), ("forward", 9), ("forward", 7), ("up", 4), ("forward", 7), ("up", 8), ("down", 8), ("forward", 5), ("down", 2), ("down", 9), ("up", 8), ("forward", 4), ("forward", 4), ("forward", 2), ("up", 4), ("down", 5), ("forward", 3), ("forward", 6), ("forward", 5), ("forward", 3), ("forward", 7), ("up", 9), ("forward", 1), ("forward", 2), ("up", 7), ("down", 4), ("forward", 8), ("down", 2), ("forward", 1), ("down", 1), ("down", 9), ("up", 2), ("down", 2), ("forward", 8), ("forward", 5), ("up", 9), ("forward", 5), ("down", 2), ("forward", 2), ("down", 7), ("forward", 5), ("down", 1), ("forward", 9), ("forward", 8), ("forward", 8), ("forward", 9), ("forward", 8), ("down", 9), ("forward", 8), ("down", 1), ("down", 2), ("down", 9), ("up", 2), ("forward", 8), ("forward", 8), ("down", 9), ("forward", 8), ("up", 8), ("forward", 2), ("down", 5), ("up", 3), ("forward", 2), ("up", 3), ("down", 6), ("forward", 5), ("up", 7), ("forward", 2), ("forward", 7), ("forward", 7), ("down", 8), ("forward", 3), ("up", 5), ("down", 8), ("down", 3), ("down", 8), ("up", 6), ("down", 6), ("up", 4), ("forward", 7), ("up", 6), ("up", 1), ("down", 5), ("up", 8), ("forward", 8), ("forward", 9), ("down", 8), ("forward", 6), ("down", 8), ("down", 9), ("down", 8), ("forward", 9), ("up", 1), ("down", 1), ("down", 8), ("down", 5), ("down", 2), ("up", 7), ("forward", 4), ("down", 4), ("forward", 6), ("down", 1), ("forward", 5), ("forward", 3), ("forward", 9), ("up", 8), ("down", 4), ("down", 6), ("down", 4), ("down", 1), ("up", 9), ("forward", 9), ("down", 9), ("forward", 7), ("down", 2), ("down", 8), ("forward", 2), ("forward", 5), ("down", 6), ("down", 1), ("down", 1), ("up", 3), ("forward", 9), ("up", 7), ("down", 1), ("down", 6), ("forward", 6), ("up", 2), ("down", 4), ("down", 7), ("forward", 3), ("down", 9), ("down", 1), ("forward", 7), ("forward", 2), ("forward", 6), ("down", 4), ("forward", 7), ("forward", 8), ("forward", 3), ("forward", 7), ("up", 8), ("forward", 5), ("up", 8), ("down", 8), ("forward", 3), ("forward", 8), ("forward", 7), ("forward", 3), ("down", 4), ("forward", 9), ("forward", 4), ("up", 6), ("forward", 4), ("forward", 6), ("up", 4), ("forward", 6), ("forward", 2), ("down", 3), ("down", 3), ("down", 4), ("down", 1), ("down", 9), ("up", 1), ("up", 9), ("down", 7), ("up", 9), ("forward", 5), ("down", 2), ("up", 7), ("forward", 9), ("up", 1), ("down", 5), ("up", 8), ("forward", 9), ("down", 1), ("up", 3), ("forward", 3), ("forward", 9), ("up", 7), ("forward", 3), ("down", 7), ("forward", 3), ("forward", 5), ("forward", 4), ("up", 3), ("forward", 3), ("down", 8), ("forward", 7), ("up", 5), ("forward", 9), ("down", 6), ("up", 6), ("up", 1), ("forward", 8), ("down", 9), ("forward", 9), ("forward", 9), ("down", 5), ("down", 7), ("forward", 7), ("down", 5), ("down", 3), ("forward", 4), ("up", 6), ("forward", 6), ("forward", 2), ("down", 8), ("down", 6), ("forward", 1), ("forward", 1), ("down", 6), ("forward", 1), ("down", 6), ("down", 2), ("forward", 1), ("forward", 6), ("up", 4), ("up", 7), ("up", 3), ("down", 6), ("forward", 1), ("forward", 9), ("forward", 4), ("down", 4), ("forward", 3), ("down", 8), ("down", 6), ("down", 6), ("forward", 2), ("forward", 8), ("forward", 6), ("down", 4), ("up", 2), ("down", 1), ("up", 4), ("down", 8), ("forward", 9), ("down", 4), ("down", 8), ("up", 8), ("forward", 2), ("up", 9), ("down", 9), ("forward", 2), ("down", 8), ("forward", 3), ("down", 1), ("up", 9), ("forward", 6), ("down", 9), ("forward", 2), ("down", 2), ("up", 5), ("down", 4), ("down", 5), ("down", 7), ("forward", 4), ("down", 4), ("forward", 6), ("forward", 2), ("down", 8), ("up", 3), ("up", 9), ("forward", 3), ("forward", 6), ("down", 6), ("down", 2), ("down", 5), ("down", 4), ("forward", 1), ("up", 2), ("down", 3), ("forward", 6), ("forward", 5), ("down", 4), ("down", 3), ("forward", 2), ("forward", 4), ("down", 9), ("down", 3), ("down", 4), ("up", 6), ("forward", 8), ("up", 2), ("up", 8), ("up", 4), ("forward", 7), ("forward", 5), ("forward", 9), ("down", 6), ("forward", 7), ("forward", 9), ("up", 3), ("forward", 6)]
val test = [("forward", 5), ("down", 5), ("forward", 8), ("up", 3), ("down", 8), ("forward",2)]

fun current_position (ds : (string*int) list, p : int*int) =
  if null ds
  then p 
  else
    let
      val d = hd(ds)
      val dir = #1 d 
      val dis = #2 d 
      val delta =
        case dir of
             "forward" => (0, dis) 
           | "down" => (dis, 0)
           | "up" => (~dis, 0)
           | _ => (0,0)
      val p2 = ((#1 p + #1 delta), (#2 p + #2 delta))
    in
      current_position(tl(ds), p2)
    end

fun current_position_2 (ds : (string*int) list, p : int*int, a : int) =
  if null ds
  then p 
  else
    let
      val d = hd(ds)
      val dir = #1 d 
      val dis = #2 d 
      val delta =
        case dir of
             "forward" => (a * dis, dis, a)
           | "down" => (0, 0, a + dis)
           | "up" => (0, 0, a - dis)
           | _ => (0, 0, a)
      val aim = #3 delta
      val p2 = ((#1 p + #1 delta), (#2 p + #2 delta))
    in
      current_position_2(tl(ds), p2, aim)
    end

fun s (p : int*int) = #1 p * #2 p

(* part 1 *)
(* s(current_position(test, (0,0))); *)
(* 150 *)

(* part 2 *)
(* s(current_position_2(test, (0,0), 0)); *)
(* 900 *)
(* s(current_position_2(dirs, (0,0), 0)); *)
